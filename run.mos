loadModel(Modelica);
getErrorString();

loadFile("connectors.mo");
getErrorString();

loadFile("constants.mo");
getErrorString();

loadFile("randgen.mo");
getErrorString();

loadFile("extFunction.mo");
getErrorString();

loadFile("drone/drone.mo");
getErrorString();

loadFile("Monitors/MonitorSuccess.mo");
getErrorString();

loadFile("Monitors/MonitorCollision.mo");
getErrorString();

loadFile("algorithms/flockingModule.mo");
getErrorString();

loadFile("algorithms/psoController.mo");
getErrorString();

loadFile("algorithms/collisionAvoidance.mo");
getErrorString();

loadFile("drone/setPoint.mo");
getErrorString();

loadFile("drone/controller.mo");
getErrorString();

loadFile("faultSystem.mo");
getErrorString();

loadFile("intruders/intruders.mo");
getErrorString();

loadFile("intruders/intrudersPoint.mo");
getErrorString();

loadFile("intruders/intrudersController.mo");
getErrorString();

loadFile("intruders/rockets.mo");
getErrorString();

loadFile("intruders/rocketPoint.mo");
getErrorString();

loadFile("intruders/rocketController.mo");
getErrorString();

loadFile("intruders/staticObs.mo");
getErrorString();

loadFile("system.mo");
getErrorString();

GC_set_max_heap_size(80000000000);getErrorString();
GC_gcollect_and_unmap();getErrorString();
/* setCommandLineOptions("-d=initialization");
getErrorString(); */

// list(K); getErrorString();
// setParameterValue(faultSys, transMatrix, {{0.7, 0.1, 0.1, 0.1},{0.6, 0.4, 0, 0},{0.5, 0, 0.5, 0},{0.7, 0, 0, 0.3}});
// getErrorString();

simulate(System, stopTime=180, simflags="-overrideFile=newValues.txt");
getErrorString();

plot({drone.x[1], drone.y[1], drone.z[1], drone.x[2], drone.y[2], drone.z[2], ctr.setx[1], ctr.sety[1], ctr.setz[1]}, externalWindow=true);

// plot({drone.x[1], drone.y[1], drone.z[1], ctr.setx[1], ctr.sety[1], ctr.setz[1], col.outCollision}, externalWindow=true);

// plot({ctr.battery[1], ctr.droneState[1], ctr.droneDead[1], ctr.battery[2], ctr.droneState[2], ctr.droneDead[2]}, externalWindow=true);

// plot({drone.Vx[1], drone.Vy[1], drone.Vz[1], ctr.Trustx[1], ctr.Trusty[1], ctr.Trustz[1], 
// ctr.battery[1], ctr.droneDead[1]}, externalWindow=true);

plot({colMan.tDD,colMan.tDC, colMan.tDR, colMan.tDSC, colMan.collision}, externalWindow = true);

//plot({drone.actualCapacity[1], drone.actualCapacity[2]},externalWindow = true);

// plot({rocket.x[1], rocket.y[1], rocket.z[1], rockP.droneFollowed[1], rockP.targetReached[1]}, externalWindow = true);

//plot({intruder.x[1],intruder.x[2], intruder.y[1],intruder.y[2],intruder.z[1],intruder.z[2]}, externalWindow = true);

//plot({drone.droneState[1], drone.droneState[2]}, externalWindow=true);



